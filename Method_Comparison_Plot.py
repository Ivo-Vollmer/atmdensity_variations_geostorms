"""@author: ivovollmer"""import syssys.path.append('PATHTOCODEFUNCTIONS')from import_files import *from math import *import numpy as npfrom functions import *import matplotlib.pyplot as plt##################################################################################################################################data_weather_2024 = load_all_data("PATHDSTINDEXDATA", 1, 1, csv=True)""" Other Python scripts need to be executed first to have the different arrays defined. """#Fit-Modelfit_psi1 = params_two_derivfit_psi2 = params_three_derivtime_fit = fit_time_deriv#Filter-Methodsma_ma = GFOC_2024_ma_ma_diff_mama_savgol = GFOC_2024_ma_savgol_diff_masavgol_savgol = GFOC_2024_savgol_savgol_diff_matime_filter = time_diff#Density density_decay = dadt_theo_matime_density = time_30sdensity_decay_MSIS = dadt_theo_MSIS_ma#ACCacc = dadt_gauss_ma_acctime_acc = time_dadt_acc#Gaussgauss_ref = dadt_gauss_matime_gauss = time_dadt#PertApproachpert_approach = movavg_full_a_airres_derivtime_pert_approach =time_grav_deriv##################################################################################################################################plt.rcParams["figure.dpi"] = 1000fig, ax = plt.subplots(figsize=(8, 4)) #Fit-Modelax.plot(time_fit, fit_psi1, linewidth=1, color='lightgreen', label='Fit-model $\dot{\overline{a}}_{\psi_1}$ ($\psi_1 = 5 \cdot 10^5$)')ax.plot(time_fit, fit_psi2, linewidth=1, color='green', label='Fit-model $\dot{\overline{a}}_{\psi_2}$ ($\psi_2 = 10^5$)')#Filter-Methodsax.plot(time_filter, ma_savgol, linewidth=1, color='purple', label='Moving average, Savitzky-Golay')ax.plot(time_filter, ma_ma, linewidth=1, color='violet', label='Moving average, moving average')ax.plot(time_filter, savgol_savgol, linewidth=1, color='darkviolet', label='Savitzky-Golay, Savitzky-Golay') #Densityax.plot(time_density, density_decay, color='orange', linewidth=1, label='Unscaled DTM2013 - elliptical orbit')ax.plot(time_density, density_decay_MSIS, color='brown', linewidth=1, label='Unscaled MSIS-00OXI - elliptical orbit')#ACCax.plot(time_dadt_acc, dadt_gauss_ma_acc, color='blue', linewidth=1, label='ACC, Gaussian approach')#Gaussax.plot(time_dadt, dadt_gauss_ma, linewidth=1, color='red', label="Reference (PCA, Gaussian approach)", zorder=10)#PertApproachax.plot(time_grav_deriv, movavg_full_a_airres_deriv, linewidth=1, color='deepskyblue', label="Perturbation approach")ax.xaxis.set_major_formatter(mjd_to_mmddhh)ax.set_xlim(60440, 60443)ax.set_ylim(-175, 10)ax.set_xlabel('Date and time (mm.dd HH:MM, GPST, 2024)')ax.set_ylabel(r'$\frac{da}{dt} \; \left[ \frac{m}{d} \right]$')ax.grid()#Rechte Achseax_right = ax.twinx()ax_right.plot(data_weather_2024[:, 0], data_weather_2024[:, 1], color='grey', linestyle='--', linewidth=1, label='Dst index', zorder=0)ax_right.set_ylabel('Dst index [nT]')ax_right.set_ylim(-450, 90)# Legendelines_left, labels_left = ax.get_legend_handles_labels()lines_right, labels_right = ax_right.get_legend_handles_labels()handles = lines_left + lines_rightlabels = labels_left + labels_rightorder = [0, 2, 3, 4, 5, 10, 1, 7, 8, 9, 6]handles = [handles[i] for i in order]labels = [labels[i] for i in order]fig.legend(handles=handles,labels=labels,loc='lower center',ncol=2,bbox_to_anchor=(0.5, -0.3),frameon=False)plt.subplots_adjust(bottom=0.2)plt.show()plt.rcParams["figure.dpi"] = 750fig, ax = plt.subplots(figsize=(8, 4)) ax.plot(data_weather_2024[:, 0], data_weather_2024[:, 1], linewidth=1, color='blue')ax.xaxis.set_major_formatter(mjd_to_mmddhh)ax.set_xlabel('Date and time (mm.dd HH:MM, GPST, 2024)')ax.set_ylabel('Dst index [nT]')ax.grid()plt.show() 