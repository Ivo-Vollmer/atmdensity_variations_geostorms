"""@author: ivovollmer"""import syssys.path.append('PATHTOCODEFUNCTIONS')from gauss_func import *from import_files import *from functions import *from fit_model_error import *from math import *import numpy as npfrom scipy.fft import rfft, rfftfreqfrom scipy.signal import savgol_filterfrom scipy.signal import find_peaksimport matplotlib.pyplot as plt##################################################################################################################################data_weather_2024 = load_all_data("PATHDSTINDEXDATA", 1, 1, csv=True)# Grace-FO-C 2024----------------------------------------------------------- data_RD_30s = load_all_data("PATHRD30SDATA", 24, 1) #Volle Messreihe GFOC, 2024, RD, 30s samplingtime_30s = data_RD_30s[:, 1]u_sat_RD = data_RD_30s[:, 17]#Gauss-Approach alte Daten und alte Methode-------------------------------master_ele('/PATHRDELEDATA', 'PATHFOLDERSAVEFILE') u_data = np.column_stack((time_30s, u_sat_RD))mjd_interval = [60431, 60492]a_int_data, a_dot_data = master_integrator(u_data, 'PATHFOLDERSAVEFILE_ELEOSC', 'PATHFOLDERSAVEFILE_PCA', mjd_interval)time_a = a_int_data[:, 0]a_gauss = a_int_data[:, 1]time_dadt = a_dot_data[:, 0]#Moving average fÃ¼r dadtwin_len_ma = 94+1     #ganzer Umlauf                                           dadt_gauss = a_dot_data[:, 1]                                                                                                                                dadt_gauss_ma = np.convolve(dadt_gauss, np.ones(win_len_ma)/win_len_ma, mode='same')    ##################################################################################################################################data_1s = load_all_data("PATHRDLST1SDATA", 25, 301) #Volle Messreihe GFOC, 2024, RD, 1s samplingdata_a_1s = data_1s[:, 20]data_time_1s = data_1s[:, 1]win_len = [4*5658+1, 5*5658+1]for win_len_filter in win_len:    #1.1 Ma/Savgol -->da/dt, ma     GFOC_2024_ma = np.convolve(data_a_1s, np.ones(win_len_filter)/win_len_filter, mode='same')    GFOC_2024_ma_savgol = savgol_filter(GFOC_2024_ma, window_length=win_len_filter, polyorder=2)                                               GFOC_2024_ma_savgol_diff, time_diff = cal_deriv(GFOC_2024_ma_savgol, 1/86400, data_time_1s)    GFOC_2024_ma_savgol_diff_ma = np.convolve(GFOC_2024_ma_savgol_diff, np.ones(win_len_filter)/win_len_filter, mode='same')        #1.2 Ma/Ma -->da/dt, ma     GFOC_2024_ma = np.convolve(data_a_1s, np.ones(win_len_filter)/win_len_filter, mode='same')    GFOC_2024_ma_ma = np.convolve(GFOC_2024_ma, np.ones(win_len_filter)/win_len_filter, mode='same')    GFOC_2024_ma_ma_diff, _ = cal_deriv(GFOC_2024_ma_ma, 1/86400, data_time_1s)    GFOC_2024_ma_ma_diff_ma = np.convolve(GFOC_2024_ma_ma_diff, np.ones(win_len_filter)/win_len_filter, mode='same')        #1.3 Savgol/Savgol -->da/dt, ma    GFOC_2024_savgol = savgol_filter(data_a_1s, window_length=win_len_filter, polyorder=2)                                                   GFOC_2024_savgol_savgol = savgol_filter(GFOC_2024_savgol, window_length=win_len_filter, polyorder=2)                                       GFOC_2024_savgol_savgol_diff, _ = cal_deriv(GFOC_2024_savgol_savgol, 1/86400, data_time_1s)                                                                                                GFOC_2024_savgol_savgol_diff_ma = np.convolve(GFOC_2024_savgol_savgol_diff, np.ones(win_len_filter)/win_len_filter, mode='same')        #Plot    plt.rcParams["figure.dpi"] = 1000    fig, ax = plt.subplots(figsize=(8, 4))     ax.plot(time_dadt, dadt_gauss_ma, linewidth=1, color='red', label="Reference (Gaussian approach)", zorder=3)    ax.plot(time_diff, GFOC_2024_ma_savgol_diff_ma, linewidth=1, color='darkviolet', label='Moving average, Savitzky-Golay', zorder=1)    ax.plot(time_diff, GFOC_2024_ma_ma_diff_ma, linewidth=1, color='blue', label='Moving average, moving average', zorder=1)    ax.plot(time_diff, GFOC_2024_savgol_savgol_diff_ma, linewidth=1, color='green', label='Savitzky-Golay, Savitzky-Golay', zorder=1) #passt mit 4*orbit winlen    ax.xaxis.set_major_formatter(mjd_to_mmddhh)    ax.set_xlim(60440, 60443)    ax.set_ylim(-175, 10)    ax.set_xlabel('Date and time (mm.dd HH:MM, GPST, 2024)')    ax.set_ylabel(r'$\frac{da}{dt} \; \left[ \frac{m}{d} \right]$')    ax.grid()    #Rechte Achse    ax_right = ax.twinx()    ax_right.plot(data_weather_2024[:, 0], data_weather_2024[:, 1], color='grey', linestyle='--', linewidth=1, label='Dst index', zorder=0)    ax_right.set_ylabel('Dst index [nT]')    ax_right.set_ylim(-450, 90)    # Legende    lines_left, labels_left = ax.get_legend_handles_labels()    lines_right, labels_right = ax_right.get_legend_handles_labels()    handles = lines_left + lines_right    labels = labels_left + labels_right    order = [1, 2, 3, 0, 4]    handles = [handles[i] for i in order]    labels = [labels[i] for i in order]    fig.legend(    handles=handles,    labels=labels,    loc='lower center',    ncol=2,    bbox_to_anchor=(0.5, -0.2),    frameon=False)    plt.subplots_adjust(bottom=0.2)    plt.show()