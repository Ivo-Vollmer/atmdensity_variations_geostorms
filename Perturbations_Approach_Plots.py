"""@author: ivovollmer"""import syssys.path.append('PATHTOCODEFUNCTIONS')from gauss_func import *from import_files import *from functions import *from int_daily_function import *from offset_function_updated import *from math import *import numpy as npfrom scipy.fft import rfft, rfftfreqfrom scipy.signal import savgol_filterfrom scipy.signal import find_peaksimport matplotlib.pyplot as plt##################################################################################################################################data_weather_2024 = load_all_data("PATHDSTINDEXDATA", 1, 1, csv=True)# Grace-FO-C 2024----------------------------------------------------------- data_RD_30s = load_all_data("PATHRD30SDATA", 24, 1) #Volle Messreihe GFOC, 2024, RD, 30s samplingtime_30s = data_RD_30s[:, 1]u_sat_RD = data_RD_30s[:, 17]#Gauss-Approach alte Daten und alte Methode-------------------------------master_ele('/PATHRDELEDATA', 'PATHFOLDERSAVEFILE') u_data = np.column_stack((time_30s, u_sat_RD))mjd_interval = [60431, 60492]a_int_data, a_dot_data = master_integrator(u_data, 'PATHFOLDERSAVEFILE_ELEOSC', 'PATHFOLDERSAVEFILE_PCA', mjd_interval)time_a = a_int_data[:, 0]a_gauss = a_int_data[:, 1]time_dadt = a_dot_data[:, 0]#Moving average für dadtwin_len_ma = 94+1     #ganzer Umlauf       win_len_ma_half = 47 #halber Umlauf                                    dadt_gauss = a_dot_data[:, 1]                                                                                                                                dadt_gauss_ma = np.convolve(dadt_gauss, np.ones(win_len_ma)/win_len_ma, mode='same')    dadt_gauss_ma_half = np.convolve(dadt_gauss, np.ones(win_len_ma_half)/win_len_ma_half, mode='same')    ###################################################################################################################################Nulltestgrav_data_Nulltest = load_all_data("PATHNULLTEST1SDATA", 28, 1) #Daten des Nulltest mit 1s-Sampling (GFOC 2024)dt_Nulltest = 1  n_per_day_Nulltest = 86400n_days_Nulltest = 5time_data_Nulltest = grav_data_Nulltest[:, 1]a_array_Nulltest = grav_data_Nulltest[:, 20]a_array_resamp_Nulltest = a_array_Nulltest[::2*dt_Nulltest]time_resamp_Nulltest = time_data_Nulltest[::2*dt_Nulltest]e_array_Nulltest = grav_data_Nulltest[:, 21]u_array_Nulltest = grav_data_Nulltest[:, 17] * np.pi / 180 omega_array_Nulltest = grav_data_Nulltest[:, 24] * np.pi / 180 r_array_Nulltest = grav_data_Nulltest[:, 11]R_array_Nulltest = grav_data_Nulltest[:, 34] * 0.001 S_array_Nulltest = grav_data_Nulltest[:, 35] * 0.001 a_values_int_Nulltest = int_daily(a_array_Nulltest, e_array_Nulltest, u_array_Nulltest, omega_array_Nulltest, r_array_Nulltest, R_array_Nulltest, S_array_Nulltest, n_per_day_Nulltest, n_days_Nulltest, dt_Nulltest)residuals_a_values_Nulltest = a_array_resamp_Nulltest - a_values_int_Nulltest#------------------------------------------------------------------------------grav_data = load_all_data("PATHPERTURBATIONS1SLSTDATA", 28, 301) #GFOC Daten mit Grav-Beschleunigungensampling = 1 dt = 1n_per_day = 86400n_days = 61time_data = grav_data[:, 1]a_array = grav_data[:, 20]a_array_resamp = a_array[::2*dt]time_resamp = time_data[::2*dt]e_array = grav_data[:, 21]u_array = grav_data[:, 17] * np.pi / 180 omega_array = grav_data[:, 24] * np.pi / 180 r_array = grav_data[:, 11]R_array = grav_data[:, 34] * 0.001 S_array = grav_data[:, 35] * 0.001 SRP_R = grav_data[:, 37] * 10**-9SRP_S = grav_data[:, 38] * 10**-9ref_PRP_R = grav_data[:, 40] * 10**-9ref_PRP_S = grav_data[:, 41] * 10**-9em_PRP_R = grav_data[:, 43] * 10**-9em_PRP_S = grav_data[:, 44] * 10**-9#------a_grav = int_daily(a_array, e_array, u_array, omega_array, r_array, R_array, S_array, n_per_day, n_days, dt)print("a_grav done")a_SRP = int_daily(a_array, e_array, u_array, omega_array, r_array, SRP_R, SRP_S, n_per_day, n_days, dt)print("a_SRP done")a_refPRP = int_daily(a_array, e_array, u_array, omega_array, r_array, ref_PRP_R, ref_PRP_S, n_per_day, n_days, dt)print("a_refPRP done")a_emPRP = int_daily(a_array, e_array, u_array, omega_array, r_array, em_PRP_R, em_PRP_S, n_per_day, n_days, dt)print("a_emPRP done")#------a_airres = a_array_resamp - a_grav - a_SRP - a_refPRP - a_emPRPn_comparison = 10a_airres_cont = offset_correction_direct(a_airres, int(len(a_airres)/n_days), n_days, n_comparison)a_airres_deriv, time_grav_deriv = cal_deriv(a_airres_cont, 2*dt/86400, time_resamp)win_len_ma_half = int(282*10/(2*dt)+1) win_len_ma_full = int(282*10/(2*dt)+1) * 2movavg_full_a_airres_deriv = np.convolve(a_airres_deriv, np.ones(win_len_ma_full)/win_len_ma_full, mode='same')   movavg_half_a_airres_deriv = np.convolve(a_airres_deriv, np.ones(win_len_ma_half)/win_len_ma_half, mode='same')   ###################################################################################################################################Nulltest-plot a(t), passtplt.rcParams["figure.dpi"] = 750fig, ax = plt.subplots(figsize=(8, 4)) ax.plot(time_resamp_Nulltest, residuals_a_values_Nulltest, linewidth=1, color='blue')ax.xaxis.set_major_formatter(mjd_to_mmddhh)ax.set_xlabel('Date and time (mm.dd HH:MM, GPST, 2024)')ax.set_ylabel('a(t) [m]')ax.grid()plt.show() #Perturbations-Approach, passtplt.rcParams["figure.dpi"] = 1000fig, ax = plt.subplots(figsize=(8, 4)) ax.plot(time_dadt, dadt_gauss_ma, linewidth=1, color='red', label="Reference (Gaussian approach, window width = 94 min)")ax.plot(time_grav_deriv, movavg_full_a_airres_deriv, linewidth=1, color='blue', label="Perturbation approach (window width = 94 min)")ax.xaxis.set_major_formatter(mjd_to_mmddhh)ax.set_xlim(60440, 60443)ax.set_ylim(-175, 10)ax.set_xlabel('Date and time (mm.dd HH:MM, GPST, 2024)')ax.set_ylabel(r'$\frac{da}{dt} \; \left[ \frac{m}{d} \right]$')ax.grid()#Rechte Achseax_right = ax.twinx()ax_right.plot(data_weather_2024[:, 0], data_weather_2024[:, 1], color='grey', linestyle='--', linewidth=1, label='Dst index', zorder=0)ax_right.set_ylabel('Dst index [nT]')ax_right.set_ylim(-450, 90)#Legendelines_left, labels_left = ax.get_legend_handles_labels()lines_right, labels_right = ax_right.get_legend_handles_labels()handles = lines_left + lines_rightlabels = labels_left + labels_rightorder = [1, 0, 2]handles = [handles[i] for i in order]labels = [labels[i] for i in order]fig.legend(    handles=handles,    labels=labels,    loc='lower center',    ncol=1,    bbox_to_anchor=(0.5, -0.15),    frameon=False)plt.subplots_adjust(bottom=0.2)plt.show()#Perturbations-Approach mit once per rev Störung, passt plt.rcParams["figure.dpi"] = 1000fig, ax = plt.subplots(figsize=(8, 4)) ax.plot(time_dadt, dadt_gauss_ma, linewidth=1, color='darkviolet', label="Reference (Gaussian approach, window width = 94 min)")ax.plot(time_dadt, dadt_gauss_ma_half, linewidth=1, color='red', label="Reference (Gaussian approach, window width = 47 min)")ax.plot(time_grav_deriv, movavg_half_a_airres_deriv, linewidth=1, color='blue', label="Perturbation approach (window width = 47 min)")ax.xaxis.set_major_formatter(mjd_to_mmddhh)ax.set_xlim(60440, 60443)ax.set_ylim(-175, 10)ax.set_xlabel('Date and time (mm.dd HH:MM, GPST, 2024)')ax.set_ylabel(r'$\frac{da}{dt} \; \left[ \frac{m}{d} \right]$')ax.grid()#Rechte Achseax_right = ax.twinx()ax_right.plot(data_weather_2024[:, 0], data_weather_2024[:, 1], color='grey', linestyle='--', linewidth=1, label='Dst index', zorder=0)ax_right.set_ylabel('Dst index [nT]')ax_right.set_ylim(-450, 90)#Legendelines_left, labels_left = ax.get_legend_handles_labels()lines_right, labels_right = ax_right.get_legend_handles_labels()handles = lines_left + lines_rightlabels = labels_left + labels_rightorder = [2, 1, 0, 3]handles = [handles[i] for i in order]labels = [labels[i] for i in order]fig.legend(    handles=handles,    labels=labels,    loc='lower center',    ncol=1,    bbox_to_anchor=(0.5, -0.2),    frameon=False)plt.subplots_adjust(bottom=0.2)plt.show()